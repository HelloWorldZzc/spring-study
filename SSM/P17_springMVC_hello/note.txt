一、MVC--->什么是mvc
    MVC是一种软件架构的思想，将软件按照模型、视图、控制器来划分
    M：Model，模型层，指工程中的JavaBean，作用是处理数据
        JavaBean分为两类：
        一类称为实体类Bean：专门存储业务数据的，如 Student、User 等
        一类称为业务处理 Bean：指 Service 或 Dao 对象，专门用于处理业务逻辑和数据访问。
    V：View，视图层，指工程中的html或jsp等页面，作用是与用户进行交互，展示数据
    C：Controller，控制层，指工程中的servlet，作用是接收请求和响应浏览器

二、MVC的工作流程
     用户通过视图层发送请求到服务器，在服务器中请求被Controller接收，Controller调用相应的Model层处理请求，处理完毕将结果返回到Controller，Controller再根据请求处理的结果找到相应的View视图，渲染数据后最终响应给浏览器

三、springMVC--->介绍&特点
    介绍：
        SpringMVC是Spring的一个后续产品，是Spring的一个子项目，是 Spring 为表述层开发提供的一整套完备的解决方案。
        (PS:三层架构：表述层，数据层，服务层)
    特点：
        1、Spring 家族原生产品，与 IOC 容器等基础设施无缝对接
        2、基于原生的Servlet，通过了功能强大的前端控制器DispatcherServlet，对请求和响应进行统一处理
        3、表述层各细分领域需要解决的问题全方位覆盖，提供全面解决方案
        4、代码清新简洁，大幅度提升开发效率
        5、内部组件化程度高，可插拔式组件即插即用，想要什么功能配置相应组件即可
        6、性能卓著，尤其适合现代大型、超大型互联网项目要求

四、hello world案例
    1、创建工程
        方式1 使用传统的maven创建 在pom.xml文件中设置打包方式为war 在项目配置中配置web路径(在main/webapp/WEB-INF/web.xml)
        方式2 使用maven原型的方式 选择web方式创建 手动添加main中缺少的内容

   2、导入springMVC的相关依赖
        springMVC 日志 ServletAPI spring5和thymeleaf整合包

   3、配置web.xml
        注册springMVC的前端控制器DispatcherServlet
        PS：(目前)在此配置文件下，springMVC配置文件默认位于web-INF下，默认的名称为value-servlet.xml(value是servlet-name的值)

   4、创建请求控制器，里面写好首页与登录的跳转方法
    @controller
    public class HelloController{
        @RequestMapping("/")
        public String index(){
            return "index";
        }
        @RequestMapping("/hello")
        public String hello(){
            return "success";
        }
    }

    5、创建springMVC的配置文件
        根据3可得他的配置文件名称，在其中创建文本扫描与thymeleaf配置
        注意他的视图前缀与视图后缀 前面指的是路径 后面指的是文件的类型,4中return "xxx" 是在thymeleaf中去除前缀与后缀的表达


    6、按照springmvc配置文件的内容 创建相关的HTML文件
        注意 HTML文件前面要写上<meta charset="UTF-8" xmlns:th="http://www.thymeleaf.org">
        这样可以使用thymeleaf的语法规则比如：<a th:href="@{/hello}">登录</a>
        如果不用这样的语法规则，直接写在a标签中那么是绝对路径了，是访问不到的

    7、启动项目(可以在pom.xml中导入Tomcat插件，也可配置本地Tomcat)--->完成一个入门级别的案例

五、补充点
    1、在web.xml中<servlet>选项(在下个项目中生效)
            <!--自定义配置文件的位置-->
            <init-param>
                  <param-name>contextConfigLocation</param-name>
                  <param-value>classpath:springMVC.xml</param-value>
            </init-param>
            <!--将DispatcherServlet的初始化时间提前到服务器启动时-->
                <load-on-startup>1</load-on-startup>

    2、Tomcat配置提醒：
        可以使用本地的，每次使用前记得配置好Tomcat
        可以使用插件Tomcat7 但是<path>xxx</path>记得在其中加入值，不然<a th:href="@{/hello}">登录</a>就没有那么大的作用了