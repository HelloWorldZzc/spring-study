1、引入外部文件---->测试数据库连接
    1、更新pom.xml，添加相关的依赖
    2、创建jdbc.properties文件，里面是数据库相关的配置信息
    3、创建data.xml文件，里面写好与其相关的bean（注意bean文件与引入外部文件）
    4、在测试类中进行测试

2、bean的作用域
    scope指定:取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象
             取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象


3、bean的生命周期
    1、bean对象创建（调用无参构造器）
    2、给bean对象设置属性
        了解 bean对象初始化之前操作（由bean的后置处理器负责,bean需要多例,具体代码可参考文档）
    3、bean对象初始化（需在配置bean时指定初始化方法）
        了解 bean对象初始化之后操作（由bean的后置处理器负责，bean需要多例,具体代码可参考文档）
    4、bean对象就绪可以使用
    5、bean对象销毁（需在配置bean时指定销毁方法）
    6、IOC容器关闭

ps:
    1、需要注意的是，bean后置处理器不是单独针对某一个bean生效，而是针对IOC容器中所有bean都会执行
    2、若bean的作用域为单例时，生命周期的前三个步骤会在获取IOC容器时执行
    3、若bean的作用域为多例时，生命周期的前三个步骤会在获取bean时执行

4、been的自动装配
    之前bean中需要套用对象的话，我们都是手动配置的，这样有点麻烦，因此我们可以使用自动装配
    模拟出java项目的三层架构 服务层 控制层 持久层（为了简便就省略了相关的接口）

    1、使用传统的方式完成
    2、使用自动装配的auto byType
        根据类型匹配IOC容器中的某个兼容类型的bean，为属性自动赋值
        如果没有一个匹配上？--->那使用默认值null--->会报空指针异常
        如果有多个匹配上?--->那么框架也不知道我们需要使用哪个---->NoUniqueBeanDefinitionException
    3、使用自动装配的auto byName
        将自动装配的属性的属性名，作为bean的id在IOC容器中匹配相对应的bean进行赋值(举例，A bean中需要一个name为 b的类，正好有一个id为b,那么就自动)
        如果没有一个匹配上？--->那使用默认值null--->会报空指针异常
        如果有多个匹配上?--->不可能（ID为唯一值）--->xml编译出错