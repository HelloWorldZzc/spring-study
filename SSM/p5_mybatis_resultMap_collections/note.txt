接上上面的案例--->一对多查询 查询一个部门中的所有员工信息
TIP：
    在此之前，记得在dept标准的Javabean中添加List<emp>字段，添加set与get方法并更新toString方法

1、级联---->不能，因为在dept表中并没有emp表中的内容，因此不能使用

2、使用collection关键字
    经典标志：
        <resultMap id="getDeptAndEmpByDeptIdMap" type="dept">
                <id column="dept_id" property="deptId"></id>
                <result column="dept_name" property="deptName"></result>
                <collection property="emp" ofType="com.study.pojo.emp">
                    <id column="emp_id" property="empId"></id>
                    <result column="emp_name" property="empName"></result>
                    <result column="age" property="age"></result>
                </collection>
        </resultMap>

        <select id="getDeptAndEmpByDeptId" resultMap="getDeptAndEmpByDeptIdMap">
                SELECT *
                FROM t_dept
                         LEFT JOIN t_emp
                                   ON t_dept.dept_id = t_emp.dept_id
                WHERE t_dept.dept_id = #{deptId}
        </select>
    新关键字解答：
        ofType：说对应的是哪个文件中的Javabean对象


3、分步查询
原理/关键字与之前的相似

---------------------
分部查询的特点：
    分步查询的优点：可以实现延迟加载，但是必须在核心配置文件中设置全局配置信息：
        lazyLoadingEnabled：延迟加载的全局开关。当开启时，所有关联对象都会延迟加载
        aggressiveLazyLoading：当开启时，任何方法的调用都会加载该对象的所有属性。否则，每个属性会按需加载，此时就可以实现按需加载，获取的数据是什么，就只会执行相应的sql。
    （aggressiveLazyLoading按需加载）此时可通过association和collection中的fetchType属性设置当前的分步查询是否使用延迟加载，
        fetchType="lazy(延迟加载)|eager(立即加载)"
