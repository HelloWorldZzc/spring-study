本项目主要介绍：SpringMVC处理ajax请求 &&@ResponseBody与@RequestBody
@RequestBody可以获取请求体信息，使用@RequestBody注解标识控制器方法的形参，当前请求的请求体就会为当前注解所标识的形参赋值
@ResponseBody用于标识一个控制器方法，可以将该方法的返回值直接作为响应报文的响应体响应到浏览器

1、demo-Ajax的测试
    在前端的学习中，会使用axios.get(xxx).then()的方式来获取数据，这些数据是怎么来的呢，在后端中springMVC框架来了解一下
    1-1 发送纯Ajax请求，接收数据
        在控制层  httpServletResponse.getWriter().println("get data！hello axios");

    1-2 发送Ajax请求，带参数
        在控制层 public void testParam(@RequestBody String body, HttpServletResponse response) body中为参数data

    1-3 获取参数
        在1-2中，虽然能获取参数，但都是字符串类型的，如果每次都进行处理，比较复杂，有简便方式
        两种方式都要满足几个条件
             a>导入jackson的依赖
             b>在SpringMVC的配置文件中设置<mvc:annotation-driven />
             c>使用@RequestBody注解标识注解
        方式1：实例类Javabean
        方式2：map集合

2、responseBody
    传统的方式 httpServletResponse.getWriter().println("get data！hello axios");
    那么使用@ResponseBody return的值会直接返回

        请求：axios.get(xxx).then(res=>console.log(res.data))
    2-1 demo
        @ResponseBody标注Controller方法，那么这个方法返回的值就是输出值

    2-2 返回特殊数据
        需要满足三个条件：
             a>导入jackson的依赖
             b>在SpringMVC的配置文件中设置<mvc:annotation-driven />
             c>使用@ResponseBody注解标识注解
        常用的Java对象转换为json的结果：
            实体类-->json对象
            map-->json对象
            list-->json数组

        在以上操作下，返回的类型则为输出的类型

=========================================================================
文件下载
    可以把他当成是一个固定的格式模板，只需要根据下载的文件路径与名称进行更改就行了


=========================================================================
文件上传
    文件上传要求form表单的请求方式必须为post，并且添加属性enctype="multipart/form-data" SpringMVC中将上传的文件封装到MultipartFile对象中，通过此对象可以获取文件相关信息
    步骤：
        1、添加依赖
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.3.1</version>
        </dependency>
        2、在springMVC.xml中添加配置
        <bean id="multipartResolver"
            class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        </bean>
        3、设置表单 name属性很重要，通过MultipartFile user_up(name的具体值)，可以利用springMVC对其进行操作

        4、获取名称，路径，创建，跳转等一些列操作，使得其完成上传操作




