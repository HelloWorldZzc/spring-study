本项目主要介绍在查询语句中 resultMap（自定义映射）的用法
一、解决字段名和实体类中的属性名不一致的问题
案例：本项目中 com.study.pojo.emp中Javabean存储的是 empId 但数据库中存储的是emp_id，如果直接查询因为属性名不一致导出查询为空
解决方案：
    1、取别名(强制让其匹配)
        select emp_id empId,emp_name empName,age age from t_emp where emp_id=#{empId}
    2、在mybatis-config设置中 <setting name="mapUnderscoreToCamelCase" value="true"/>
        (把数据库命名方式改成驼峰，在两者均符合编码规范的时候，可以达到目的)
    3、使用resultMap自定义映射处理
    <!--
        resultMap：设置自定义的映射关系 id：唯一标识  type：处理映射关系的实体类的类型
        常用的标签：
            id：处理主键和实体类中属性的映射关系
            result：处理普通字段和实体类中属性的映射关系
            association：处理多对一的映射关系（处理实体类类型的属性）
            collection：处理一对多的映射关系（处理集合类型的属性）
        嵌套标签
            column：设置映射关系中的字段名，必须是sql查询出的某个字段（选择SQL中的哪个）
            property：设置映射关系中的属性的属性名，必须是处理的实体类类型中的属性名（等于Javabean中的哪个）
        （其他关键字可看案例进行查询）

    -->




二、多对一查询
案例：查询员工信息以及员工所对应的部门信息（多个员工 对应 一个部门）
tip：在操作前在emp的Javabean中添加dept的Javabean，同时添加set 与 get方法并更新toString方法


1、通过级联的方式解决
    经典标志：
        <result column="dept_id" property="dept.deptId"></result>
        <result column="dept_name" property="dept.deptName"></result>
    使用这样的方式，配合SQL语句的连接查询，能达到查询的作用

2、通过association关键字解决
    经典标志：
        <resultMap id="getEmpAndDeptByEmpId" type="emp">
                <id column="emp_id" property="empId"></id>
                <result column="emp_name" property="empName"></result>
                <result column="age" property="age"></result>
                <association property="dept" javaType="com.study.pojo.dept">
                    <id column="dept_id" property="deptId"></id>
                    <result column="dept_name" property="deptName"></result>
                </association>
        </resultMap>
    新关键字解析：
        association：处理多对一的映射关系（处理实体类类型的属性）
        property：设置需要处理映射关系的属性的属性名（本案例中，emp中含有dept，因此使用dept）
        javaType：设置要处理的属性的类型(返回的类型 com.study.pojo.dept中的类型)
3、通过分步查询的方式
    两步进行查询，这样SQL语句比较简单
    1、通过id查询到t_emp表中的数据

     <resultMap id="getEmpAndDeptByStepOne" type="emp">
            <id column="emp_id" property="empId"></id>
            <result column="emp_name" property="empName"></result>
            <result column="age" property="age"></result>
            <association property="dept"
                         select="com.study.mapper.deptMapper.getEmpAndDeptByStepTwo"
                         column="dept_id">
                <id column="dept_id" property="deptId"></id>
                <result column="dept_name" property="deptName"></result>
            </association>
     </resultMap>
     <select id="getEmpAndDeptByStepOne" resultMap="getEmpAndDeptByStepOne">
            select * from t_emp where emp_id = #{empId}
     </select>

     新关键字说明：
           property：设置需要处理映射关系的属性的属性名（本案例中，emp中包含dept属性）
           select：设置分步查询的sql的唯一标识(分步查询，下一步跳转到哪)
           column：将查询出的某个字段作为分步查询的sql的条件(下一步中如需要参数，把这条语句中查询的某个参数赋值给下一条语句)
           fetchType：在开启了延迟加载的环境中，通过该属性设置当前的分步查询是否使用延迟加载
           fetchType="eager(立即加载)|lazy(延迟加载)"
    2、通过emp表中返回数据的dept_id属性，在dept表中进行查询后展示
         <resultMap id="getEmpAndDeptByStepTwoResultMap" type="dept">
                <id column="dept_id" property="deptId"></id>
                <result column="dept_name" property="deptName"></result>
         </resultMap>
         <select id="getEmpAndDeptByStepTwo" resultMap="getEmpAndDeptByStepTwoResultMap">
                select * from t_dept where dept_id=#{id}
         </select>
        说明：也可以直接写resultMap:dept，这里是因为MySQL语句与Javabean中的语句不符，导致无法映射，采用此方法


三、多对一查询
    在p6_mybatis_resultMap2中展示，以免影响本项目中的相关结构